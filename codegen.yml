schema:
  - ./schema.gql
generates:
  ./types.ts:
    plugins:
      - typescript
      - typescript-resolvers
      - add:
          content: |
            export type DeepPartial<T> = {
              [P in keyof T]?: T[P] extends Array<infer U>
              ? Array<DeepPartial<U>>
              : T[P] extends ReadonlyArray<infer U>
              ? ReadonlyArray<DeepPartial<U>>
              : DeepPartial<T[P]>
            };
    config:
      defaultMapper: DeepPartial<{T}>
      maybeValue: T | undefined
      customResolverFn: |
        (
          parent: TParent & { args?: { [key: string]: unknown } },
          args: TArgs,
          context: TContext,
          info: GraphQLResolveInfo
        ) => Promise<TResult & {args?: TArgs}> | TResult & {args?: TArgs}
